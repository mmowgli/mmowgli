/*
  Copyright (C) 2010-2014 Modeling Virtual Environments and Simulation
  (MOVES) Institute at the Naval Postgraduate School (NPS)
  http://www.MovesInstitute.org and http://www.nps.edu
 
  This file is part of Mmowgli.
  
  Mmowgli is free software: you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  any later version.

  Mmowgli is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with Mmowgli in the form of a file named COPYING.  If not,
  see <http://www.gnu.org/licenses/>
*/

package edu.nps.moves.mmowgli.db.pii;

import static edu.nps.moves.mmowgli.MmowgliConstants.DEBUG_LOGS;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.List;

import javax.persistence.*;

import org.hibernate.Criteria;
import org.hibernate.Session;
import org.hibernate.annotations.Parameter;
import org.hibernate.annotations.Type;
import org.hibernate.annotations.TypeDef;
import org.hibernate.search.annotations.*;
import org.jasypt.hibernate4.type.EncryptedStringType;

import edu.nps.moves.mmowgli.db.User;
import edu.nps.moves.mmowgli.utility.MiscellaneousMmowgliTimer.MSysOut;

/** Used for jasypt encryption of fields */

@TypeDef(
    name = "encryptedString",
    typeClass = EncryptedStringType.class,
    parameters = { @Parameter(name = "encryptorRegisteredName", value = "propertiesFileHibernateStringEncryptor") })
/**
 * User persistent class.
 * 
 * @author DMcG
 * 
 *         This is a database table, listing registered users
 * 
 *         Modified on Dec 16, 2010
 * 
 *         MOVES Institute Naval Postgraduate School, Monterey, CA, USA www.nps.edu
 * 
 * @author Mike Bailey, jmbailey@nps.edu
 * @version $Id$
 */
@Entity()
@Indexed(index = "mmowgli")
public class UserPii implements Serializable
{
  private static final long serialVersionUID = -7051174328195521072L;

  // @formatter:off
  // Database column names
  public static String USER_ID_COL              = "id";
  public static String USER_USERNAME_COL        = "userName";
  public static String USER_FIRSTNAME_COL       = "realFirstName";
  public static String USER_LASTNAME_COL        = "realLastName";
  public static String USER_EMAIL_COL           = "emailAddresses";
  public static String USER_EXPERTISE_COL       = "expertise";
  public static String USER_LOCATION_COL        = "location";
  public static String USER_PASSWORD_COL        = "password";
  public static String USER_GAMEMASTER_COL      = "gameMaster";
  public static String USER_LOCKEDOUT_COL       = "accountDisabled";
  public static String USER_ADMINISTRATOR_COL   = "administrator";
  public static String USER_TWEETER_COL         = "tweeter";
  public static String USER_BASICSCORE_COL      = "basicScore";
  public static String USER_INNOVATIONSCORE_COL = "innovationScore";


  long id; // Primary key, autogenerated
  String realFirstName;
  String realLastName;
  String password; // Encrypted user password
  String twitterId;
  String facebookId;
  String linkedInId;
  List<EmailPii> emailAddresses = new ArrayList<EmailPii>(); // one or more email addresses

  long userObjectId;
  
  public static ArrayList<User> getUserFromEmailTL(String email, Session piiSess)
  {
    Criteria criteria = piiSess.createCriteria(UserPii.class);
    ArrayList<User> aLis = new ArrayList<User>();
    
    @SuppressWarnings("unchecked")
    List<UserPii> results = criteria.list();
    for(UserPii upii : results) {
      List<EmailPii> elis = upii.getEmailAddresses();
      for(EmailPii epii : elis) {
        String s = epii.getAddress().trim();
        if(s.equalsIgnoreCase(email)) {
          MSysOut.println(DEBUG_LOGS,"User.getTL() in UserPii.getUserFromEmailTL()");
          aLis.add( User.getTL(upii.getUserObjectId()));
        }          
      }
    }
    return aLis;
  }
  
  /** No-args constructor, used by hibernate */
  public UserPii()
  {
  }
 
  @Id
  @DocumentId
  @GeneratedValue(strategy = GenerationType.AUTO)
  @Field(analyze=Analyze.NO) //index = Index.UN_TOKENIZED)
  public long getId()
  {
    return id;
  }

  public void setId(long id)
  {
    this.id = id;
  }
  
  @Basic
  public long getUserObjectId()
  {
    return userObjectId;
  }
  
  public void setUserObjectId(long uoid)
  {
    userObjectId = uoid;
  }
 
  @Type(type = "encryptedString")
  public String getRealFirstName()
  {
    return realFirstName;
  }

  public void setRealFirstName(String realFirstName)
  {
    this.realFirstName = realFirstName;
  }

  @Type(type = "encryptedString")
  public String getRealLastName()
  {
    return realLastName;
  }

  public void setRealLastName(String realLastName)
  {
    this.realLastName = realLastName;
  }

  @Type(type = "encryptedString")
  public String getPassword()
  {
    return password;
  }

  public void setPassword(String password)
  {
    this.password = password;
  }

  @Type(type = "encryptedString")
  public String getTwitterId()
  {
    return twitterId;
  }

  public void setTwitterId(String twitterId)
  {
    this.twitterId = twitterId;
  }

  @Type(type = "encryptedString")
  public String getFacebookId()
  {
    return facebookId;
  }

  public void setFacebookId(String facebookId)
  {
    this.facebookId = facebookId;
  }

  @Type(type = "encryptedString")
  public String getLinkedInId()
  {
    return linkedInId;
  }

  public void setLinkedInId(String linkedInId)
  {
    this.linkedInId = linkedInId;
  }

  /**
   * This user can have many email addressess
   */
  @OneToMany
  public List<EmailPii> getEmailAddresses()
  {
    return emailAddresses;
  }

  public void setEmailAddresses(List<EmailPii> emailAddresses)
  {
    this.emailAddresses = emailAddresses;
  }


}
