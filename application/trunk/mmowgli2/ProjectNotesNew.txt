14 Apr 2015

MMowgli Development notes.

Build/develop Requirements
--------------------------
1 Eclipse J2EE Luna
2 Vaadin plugin
3 Tomcat 7* local installation
4 Java Cryptography Extension (JCE) installed in JRE 8
5 MySql database
6.Ivy dependency manager
7 (Optional for cluster deployment) ApacheMQ Message Server

Introduction
------------
Mmowgli is a server-based web application written in Java. It is run within the context of a "servlet container", such as Tomcat or
Glassfish.  At the time of this writing, no servlet container other than Tomcat v7.X has been tested.  To build the rich
user interface seen in the browser, the Vaadin Web Framework is used, along with custom artwork, specified through both CSS files and
Java code.  Mmowgli cannot be run without a database, and although any could be used, Mysql is the only one which has been tested.  Mmowgli
has been developed using the Eclipse IDE, although periodic efforts are made to provide Netbeans support.  There are Netbeans
configuration files in the source tree, but beginning developers must almost certainly use Eclipse to get going.

Mmowgli can be developed and debugged on the developers local machine.  This is the desirable configuration, since you can insert
breakpoints, etc., from within Eclipse to assist development.  When running locally like this, Eclipse starts a local version of Tomcat,
so Tomcat must be available for the development machine and installed.  You may also install MySql on the local machine, which is another
convenient configuration. Eclipse, Tomcat and Mysql running locally makes for a very manageable development environment.

Mmowgli exists in its public repository in a directory tree which, when replicated locally, should be recognizable by Eclipse as an Eclipse project.

The following text will describe how to proceed to producing Mmowgli's equivalent of "Hello World". The work required falls into
the following categories:

1. Install the build tool requirements.
2. Download the Mmowgli source tree.
3. Create the local mmowgli database.
4. Create and configure the Eclipse project.
5. Adjust the source for first compile.
6. Run the application (i.e., Tomcat with a deployed Mmowgli) within Eclipse.
7. Bring up the opening page from a local browser.
8. Buy drinks all around.


Step 1: Install the build tool requirements
-------------------------------------------
Eclipse and Tomcat can be freely downloaded from https://eclipse.org/ and http://tomcat.apache.org/ .  The Vaadin plugin to Eclipse is
described here: https://vaadin.com/eclipse .  MySql here: https://www.mysql.com/ .  The Java Cryptography Extension has recently been found here:
http://www.oracle.com/technetwork/java/javase/downloads/jce8-download-2133166.html.

The Ivy dependency manager handles retrieving the libraries used by Mmowgli.  It is part of eclipse as the “Ivy” plugin.  If it is not found,
 it can be installed through the “Apache Software Foundation” provider at the “Install New Software” menu item/wizard.

Important:  Get the J2EE version of Eclipse. Also, Mmowgli has only been tested on the Community Edition of MySQL.

You do not download the Vaadin Framework itself -- only the Eclipse Vaadin plugin.  Dependencies within the Mmowgli Eclipse project are handled
through the Ivy dependency manager, and this includes the retrieval of the proper Vaadin Framework version.  More on that below.

Install the build tools per their instructions. Eclipse must have the local Tomcat installation configured as a "Server".  Mmowgli will then be
deployed to that server. (Servers tab, ->"create a new server")



Step 2: Download the Mmowgli source tree
----------------------------------------
Put the downloaded source into a directory of your choice.  Before trying to set up an Eclipse project, you will want to direct your
attention to one of the files in the distribution, mmowgli_bootstrap.sql.  This is a complete Mmowgli database, consisting of a set of SQL statements
which, when run by a mysql database manager, will construct a database on you local system.  Do the next step before configuring your Eclipse project.


Step 3: Create the local mmowgli database
-----------------------------------------
Getting your database setup will consist of two separate tasks: A) reading/running mmowgli_bootstrap.sql to build the tables, and B) installing one or
more user accounts which have rights to read and write to the database.  MySql comes with a command-line interface, but a GUI tool, MySQL Workbench, is
easy to use for both tasks.  For db novices, it is important to remember that a single database user is given different rights depending on the connection
method used to reach the db.  Local access for development will typically be through a "http://localhost:8080/dbname" connection.

The database name (within the MySQL db manager), the user name and the user password used by the running Mmowgli application through fields in
the WebContent/WEB-INF/web.xml file.  There is no limitation on the values of any of the fields, but they must obviously match the corresponding entities
installed in the database server.

In the interests of reducing the possibility of error in the steps below, after setting up user accounts and building the database, try using some other
tool to access the database through the credentials provided to make sure the database is accessible to Mmowgli code..

Step 4. Create and configure the Eclipse project
------------------------------------------------
In general, launch Eclipse with proper plugins, etc., then choose menu File->Import->General->Existing Projects into Workspace.  Aim the chooser at
the root directory of the source tree you downloaded.

TBD: Tweeks  test on sourceforge

Mmowgli performs an indexing task on some database tables during startup.  This happens in the context of Tomcat initializing the application.  The initial,
nearly empty database takes little or no time to index, but as the database accumulates Cards, Users and ActionPlans, the length of this task can exceed
Tomcat's startup timeout.  You will need to bump that startup timeout (right-click the Tomcat server in the Servers tab and find "Timeouts") as needed.

Mmowgli depends on many other Java libraries to run.  These libraries are specified through the ivysettings.xml and ivy.xml files in the project root directory.
"Resolving" the dependencies is a specific step in which the require libraries are retrieved from remote sites on the net.  Whenever ivy.xml is changed (to
include another depencency, perhaps), the resolve step takes place automatically.  At first, however, it must be done manually.  Right click on the top project
node in the Project Explorer and choose ivy->resolve.  This step takes several minutes.

Step 5. Adjust the source for first compile
-------------------------------------------
  
Mmowgli encrypts email addresses and real names before inserting in the database.  The encryption requires a "key", which is compiled into the Mmowgli
application.  This key will be gotten by Mmowgli code from a specific java class called edu.nps.moves.mmowgli.hibernate.DBEncryptor.java.  You must provide
a unique key for your data or the application will not launch.

You can supply the key do in one of 2 ways:
A) Replace edu.nps.moves.mmowgli.hibernate.DBEncryptor.java in the Mmowgli source tree.  You can then re-code it to return a "hardcoded" key string.  The 
file contents can be as simple as the following:

	package edu.nps.moves.mmowgli.hibernate;
	public class DBEncryptor
	{
  		public static String getSimplePBEPassword()
  		{
    		return "somepasscodeusedtoencrypt";
  		}
	}

B) Supply a data file which the existing DBEncryptor class will access for the key.  It must exist as a text file within the java package tree.  There is a
"template" file at src/edu/nps/moves/mmowgli/databaseEncryptionPassword.readMe.  Simply duplicate this file at the same location, naming
it databaseEncryptionPassword.properties, and edit it based on the instructions within the file.

Step 6. Compile theme and widgetsets
------------------------------------
Developers are used to having to "compile" Java source files, converting them to executable (to a JVM) class files.  A Vaadin application has 2 other compile
steps.  Vaadin apps make use of a Google Web Toolkit (GWT) “widgetset” behind the scenes.  This is the interface between the Java Vaadin GUI library and
Javascript/DOM code and data structures within the browser.  It needs to be rebuilt under certain circumstances, such as first time build (as here),
upgrade of Vaadin version, and other more esoteric cases.

There are 2 widgetsets within the mmowgli project:  the first for the main desktop-based browser application, and the 2nd for the mobile application.
Both need to be rebuild separately: In the Project Explorer, expand the “edu.nps.moves.mmowgli.widgetset” node, select Mmowgli2Widgetset.gwt.xml,
then choose “Compile widgetset” from the toolbar.

Next, expand the “edu.nps.moves.mmowgliMobile.gwt” node, select MmowgliMobileWidgetSet.gwt.xml, then choose “Compile widgetset” from the toolbar.

Finally, choose “Compile Theme” from the toolbar.

It is very convenient to have Eclipse build the project automatically when I make changes.  If this is not your preference, uncheck
 “Build Automatically” from the Project menu, and be sure to select “Build Project” whenever you make changes.

This process is separate from putting, or “publishing” your changes to the Tomcat installation of mmowgli.  That process is done through
 the “publish to the server” button described below.





Previous random notes:
Use the nodist forms of gwt libs so as to only have one version of gwt-ajaxloader stuff.

Media location:
---------------
From a programmer/app-packaging/deployment point of view, including all static application images in the created
WAR file is most desireable:  all files are contained in one war (jar/zip) file along with application class and css
files.  The image files are served to the client by the Tomcat application server.

This method works well, but is not performance-optimal.  Most images in the application will be countlessly reloaded
by the user when switching pages, etc.  It is best if this data were cached on the client end. A web browser can do this, but
the web browser is never given a chance to do this if the images are kept "within" the app and loaded "internally" by
Tomcat.

It is a simple matter in vaadin to specify how an image is to be referenced.  It is marked as a FileResource, ClassResource or
ExternalResource. The first is loaded through the (server) filesystem.  The latter two were just discussed.

There is a configuration parameter "applicationImagePath".  It contains the root path on the application server where the statically-served media
sits.  By default, it is set to /mmowgliMedia .

The database will have media entries, and those entries will include a path.  The standard for specifying media image paths in
Mmowgli follows.

Media is marked with a source field enum:
     1 GAME_IMAGES_REPOSITORY,  // file name only or relative path plus file name
     2 USER_UPLOADS_REPOSITORY, // file name only or relative path plus file name
     3 FILESYSTEM_PATH,         // full path on server machine
     4 WEB_FULL_URL,            // full url
     5 DATABASE                 // Images table in db, served by ImageServer servlet

-----
To build/deploy as a NetBeans project:

1) Download and install the latest NB platform (full install to include servers)
   from netbeans.org.  Ensure the Tomcat server is installed by selecting
   "Customize Installation" from the install wizard.

2) Follow guidance from: https://vaadin.com/book/-/page/getting-started.netbeans.html
    Start from the title: Regular Web Application Project

3) Need to include libs from GWT version 2.3.0, which Vaadin v6.8.12
   uses, in order to compile a custom vaadin widget wet.  GWT version
   is discerned from reading the release notes for Vaadin v6.8.12.
   D/L from: http://google-web-toolkit.googlecode.com/files/gwt-2.3.0.zip

4) It is noticed that the vaadin jar already contains the themes: base and reindeer.
   They are extracted and placed directly in the web file system in order to permit
   more efficient theme loading from the server.

5) Follow guidance from NB tutorial on MySql from here:
   https://netbeans.org/kb/docs/ide/mysql.html

   It's important to set up a local DB from the mmowgli_default.sql dump file. It
   is also important to use the command line to set up users + passwords for the
   particular user/password set in the web.xml file customized for local
   deployment and testing (localhost).

   Make sure local MySQL server is running and that you are connected to your
   local database under the NetBeans Services window

6) How to compile GWT widgets as a Vaadin Add-on:
   https://vaadin.com/directory/help/using-vaadin-add-ons/netbeans

   Auto compilation of a widgetset is performed on a clean/re-build.

7) Make sure you have the unlimited strength Java Cryptography Extension (JCE)
   Jurisdiction Policy Files installed for your JDK version.  Version 7 obtained from:
   http://www.oracle.com/technetwork/java/javase/downloads/jce-7-download-432124.html

8) Follow guidance in the file ./src/edu/nps/moves/mmowgli/databaseEncryptionPassword.readMe
   in order to establish a game launch smoothly

9) If you desire to stop tomcat, first undeploy the mmowgli servlet, then
   "terminate" vice stop the tomcat server as there is some kind of hangup on
   MAC OS X if not terminated this way

10) The prop: -Dsun.io.serialization.extendedDebugInfo=true set in the Tomcat
    startup JVM parameters will help T/S serialization issues

11) The context.xml in the WebContent/META-INF folder can be modified to tell
    Tomcat not to serialize sessions:

    <!-- Turn off session serialization -->
    <Manager className="org.apache.catalina.session.PersistentManager" distributable="false" saveOnRestart="false">
        <Store className="org.apache.catalina.session.FileStore"/>
    </Manager>

    URL: http://tomcat.apache.org/tomcat-7.0-doc/config/manager.html

12) DB Table rows to delete to get rid of a bogus user (Confirm the uId first):

    UserPii_EmailPii
    UserPii
    User
    EmailPii
    EmailConfirmation

    Also, make sure the GameEvent table does not link a user id to some other DB
    Table.  If so, find the offending user id and change it to a valid one just
    to get past any JVM error.

13) To update a database with new tables, or to add columns to existing tables:

    1) Using Sequel Pro, or some other good DB MGMT tool, dump the new table by
       exporting to a .sql file.

    2) Edit the updateDatabaseSchema.sql by first updating the GAME version date

       Copy and paste the exported CREATE TABLE excerpt below the GAME version
       update

       For updated tables (added columns), copy and paste any ALTER TABLE lines.
       NOTE: ALTER TABLES lines can be pulled from the console output as the DB
       is actually being changed.  Paste any UPDATE table entry lines as well
       if you have new data for an existing table column.

    3) When ready to update a DB, stop any running MMOWGLI apps., open the DB
       in DB MGMT tool, copy all new updateDatabaseSchema.sql lines down to just prior to
       the last update GAME line.

       Select the Query icon in Sequel Pro, paste in the updated info, select
       all of the line (to prevent having to do single line updates), and RUN
       SELECTION

       Check your work for any errors

       Redeploy new game WAR file with updated Hibernate code for the DB.

14) When migrating to Tomcat v8.0, follow the suggestions from here:
    http://stackoverflow.com/questions/14375673/tomcat-7-jsp-compiler-emits-unneeded-jar-warning

15) A cool, one shot way to scp the *tails.zip file to each web node (currently
    1 - 8): scp -o 'Host web8' -o 'ProxyCommand ssh tdnorbra@test.mmowgli.nps.edu nc %h %p' web7tails.zip tdnorbra@web8:~
    This assumes you already have an approved id_rsa.pub file on each node

16) Escape single quotes in a SQL line with another 'single' quote, e.g. It''s a fine day

17) Update a GM's hashes in the defaultDatabaseTemplate.sql (copy each row as a SQL INSERT into 4 tables):
    - copy the User row of that game master and place in the INSERT INTO `User` table.
      be sure to change the index value to the next one in sequence
    - copy the UserPii line and place in the corresponding `UserPii` table entry
      observing the index sequence as above
    - increment the `UserPii_EmailPii` table with the next sequence
    - lastly, copy the appropriate EmailPii line into the `EmailPii` table, again,
      observing the next index in sequence.
