/*
  Copyright (C) 2010-2014 Modeling Virtual Environments and Simulation
  (MOVES) Institute at the Naval Postgraduate School (NPS)
  http://www.MovesInstitute.org and http://www.nps.edu
 
  This file is part of Mmowgli.
  
  Mmowgli is free software: you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  any later version.

  Mmowgli is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with Mmowgli in the form of a file named COPYING.  If not,
  see <http://www.gnu.org/licenses/>
*/

package edu.nps.moves.security;

import static edu.nps.moves.mmowgli.MmowgliConstants.*;

import java.io.*;
import java.util.ArrayList;

import edu.nps.moves.mmowgli.utility.MiscellaneousMmowgliTimer.MSysOut;

/**
 * MalwareChecker.java
 * Created on Aug 17, 2012
 *
 * MOVES Institute
 * Naval Postgraduate School, Monterey, CA, USA
 * www.nps.edu
 *
 * @author Mike Bailey, jmbailey@nps.edu
 * @version $Id$
 */
public class MalwareChecker
{
  public static boolean isFileVirusFree(String fsPath)
  {
    if(PATH_TO_CLAMSCAN_VIRUS_SCANNER == null)
      return true; // found no virus because no checker installed

    ArrayList<String> arLis = new ArrayList<String>();
    arLis.add(PATH_TO_CLAMSCAN_VIRUS_SCANNER);

    if(CLAMSCAN_ARGUMENTS != null) {
      for(int i=0;i<CLAMSCAN_ARGUMENTS.length;i++)
        arLis.add(CLAMSCAN_ARGUMENTS[i]);
    }

    arLis.add(fsPath);
    
    ProcessBuilder builder = new ProcessBuilder(arLis);
    try {
      Process p = builder.start();
      int exitVal = p.waitFor(); // 0=good, 1 = failed, 2 = no file (and others, I assume), 
      return exitVal == 0;
    }
    catch(Exception ex) {
      System.err.println("Exception in MalwareChecker: "+ex.getClass().getSimpleName()+": "+ex.getLocalizedMessage());
    }
    return true; // found no virus
  }
  
  private static String  SCRIPTNAME = "UrlCheckingScript.sh";
  private static String  scriptPath=null;
  private static boolean scriptPathChecked=false;  // only check one per deploy
  
  private static String getScriptPath()
  {
    if(scriptPath == null && !scriptPathChecked) {
      scriptPathChecked=true;
      try {
        InputStream is = MalwareChecker.class.getResourceAsStream(SCRIPTNAME);
      
        // If no source stream is able to be located
        if (is == null)
          throw new IOException("Url checking script, "+SCRIPTNAME+", not found on classpath"); // caught below
   
        File tmpfile = File.createTempFile("scriptChecker", ".sh");
        tmpfile.deleteOnExit();
        
        String tmpfilename=tmpfile.getAbsolutePath();
   
        BufferedInputStream bis = new BufferedInputStream(is, 1024);
        FileOutputStream os = new FileOutputStream(tmpfile);
        BufferedOutputStream bos = new BufferedOutputStream(os, 1024);
        
        byte buffer[] = new byte[1024];
        while (true) {
          int n = bis.read(buffer);
          if (n <= 0) {
            break;
          }
          bos.write(buffer, 0, n);
        }
        bos.close();
        bis.close();
        scriptPath =  tmpfilename;
        
        // Set script to executable
        ArrayList<String> command= new ArrayList<String>(3);
        command.add("chmod");
        command.add("ugo=rwx");
        command.add(scriptPath);
        
        int exitVal = 0;
        ProcessBuilder builder = new ProcessBuilder(command);
        Process p = builder.start();
        exitVal = p.waitFor(); // 0=good, other = failure
        if(exitVal != 0) {
          scriptPath=null;
          MSysOut.println(SYSTEM_LOGS,"chmod of url-checking-script copy return non-zero.");
        }
      }
      catch(Exception ex) {
        System.err.println("Can't run url-check-script: "+ex.getClass().getSimpleName()+": "+ex.getLocalizedMessage());
      }
    }
    return scriptPath;
  }
  
  public static boolean isUrlOk(String url)
  {
    String script = getScriptPath();
    int exitVal = 0;
    if(script == null)
      return true;  // found no bad url because no checker installed
    
    try {
      ArrayList<String> command= new ArrayList<String>(3);
      command.add("/bin/sh");
      command.add(script);
      command.add(url);
      ProcessBuilder builder = new ProcessBuilder(command);
      Process p = builder.start();
      exitVal = p.waitFor();     
    }
    catch(Exception ex) {
      System.err.println("Exception running url-checking-script: "+ex.getClass().getSimpleName()+": "+ex.getLocalizedMessage());
      exitVal = -1;
    }
    return exitVal == 0;
  }
}
